/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gamesnake;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.Socket;
import java.util.*;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 *
 * @author admin1
 */
public class Client extends javax.swing.JFrame {

    public static String RoomMaster = "";
    public static String RoomID = "";
     public static String RoomStatus = "";
    
    public Client() {
          try{
            // Làm đẹp giao diện
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());}
        catch(Exception e){};
        
        setTitle("Client");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtIP = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        btnConnect = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtListPlayer = new javax.swing.JTextArea();
        btnShowList = new javax.swing.JButton();
        btnCreateRoom = new javax.swing.JButton();
        txtRoomID = new javax.swing.JTextField();
        btnJoinRoom = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btnStartGame = new javax.swing.JButton();
        txtTime = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnLeave = new javax.swing.JButton();
        txtName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 255, 255));

        jLabel1.setText("IP SERVER");

        jButton1.setText("Change IP server");

        btnConnect.setText("Connect Game");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        txtListPlayer.setColumns(20);
        txtListPlayer.setRows(5);
        jScrollPane1.setViewportView(txtListPlayer);

        btnShowList.setText("Show list player");
        btnShowList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowListActionPerformed(evt);
            }
        });

        btnCreateRoom.setText("Create room");
        btnCreateRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateRoomActionPerformed(evt);
            }
        });

        btnJoinRoom.setText("Join Room");
        btnJoinRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnJoinRoomActionPerformed(evt);
            }
        });

        jLabel2.setText("ROOM ID");

        btnStartGame.setText("Start game");
        btnStartGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartGameActionPerformed(evt);
            }
        });

        jLabel3.setText("TIME TO PREPARE");

        btnLeave.setText("Leave game");

        jLabel4.setText("Player name");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1)
                            .addComponent(btnShowList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel1))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtIP)
                            .addComponent(txtRoomID)
                            .addComponent(jLabel2)
                            .addComponent(txtTime)
                            .addComponent(txtName, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE))
                        .addGap(78, 78, 78)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnLeave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnStartGame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnJoinRoom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCreateRoom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(54, 54, 54))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnConnect)
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnShowList)
                    .addComponent(btnCreateRoom)
                    .addComponent(jLabel2))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnJoinRoom)
                            .addComponent(txtRoomID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnStartGame)
                            .addComponent(txtTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addComponent(btnLeave)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
    if(txtName.getText().equals("") == false){
        System.out.print("/* * * * * * * * * * * * * * * * * * * * * * * * * * */\n"
                + "\t\tE C H O   C L I E N T\n"
                + "/* * * * * * * * * * * * * * * * * * * * * * * * * * */\n");
        
         Socket clientSocket =null;
         String serverHostName = "localhost";
         
         int port = 3030;
        
        Scanner s = new Scanner(System.in);
        //System.out.println("Press a key to send the message ...");
        //s.next();
        //prepare the String. WARNING: add \n to make sure that the message is considered as one line

        //for (int i=0;i<20;i++){
            int i = 0;
            PrintStream printStream = null;
            try {
                try {
                    clientSocket = new Socket(serverHostName, port);
                } catch (IOException ex) {
                    System.out.println("[TCP Client] cannot open the socket with the server");
                }
            printStream = new PrintStream(clientSocket.getOutputStream());
            InputStreamReader inputStream = new InputStreamReader(clientSocket.getInputStream());
            System.out.println("Sending message "+ txtName.getText());
            String message = txtName.getText() +"\n";
            long t0 = System.currentTimeMillis();
            printStream.print(message);
            //Thread.sleep(1000);
            BufferedReader bufferedReader = new BufferedReader(inputStream);
            message = bufferedReader.readLine();
            long t1 = System.currentTimeMillis();
            System.out.printf("message {%s} received from server after %d msec \n",message,(t1-t0));
            clientSocket.close();
                } catch (IOException ex) {
                    System.out.println("error: " + ex.getMessage());
                } finally {
                printStream.close();
            }
       // }
        System.out.println("Mission Completed");
    }else{
        JOptionPane.showMessageDialog(this, "Cannot connect you must input name");
    }
    }//GEN-LAST:event_btnConnectActionPerformed

    private void btnShowListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowListActionPerformed
          System.out.print("/* * * * * * * * * * * * * * * * * * * * * * * * * * */\n"
                + "\t\tE C H O   C L I E N T\n"
                + "/* * * * * * * * * * * * * * * * * * * * * * * * * * */\n");
        
         Socket clientSocket =null;
         String serverHostName = "localhost";
         
         int port = 3030;
        
        Scanner s = new Scanner(System.in);
        //System.out.println("Press a key to send the message ...");
        //s.next();
        //prepare the String. WARNING: add \n to make sure that the message is considered as one line

        //for (int i=0;i<20;i++){
            int i = 0;
            
            String temp = "ShowList";
            
            PrintStream printStream = null;
            try {
                try {
                    clientSocket = new Socket(serverHostName, port);
                } catch (IOException ex) {
                    System.out.println("[TCP Client] cannot open the socket with the server");
                }
            printStream = new PrintStream(clientSocket.getOutputStream());
            InputStreamReader inputStream = new InputStreamReader(clientSocket.getInputStream());
            System.out.println("Sending message "+ temp);
            String message = temp +"\n";
            long t0 = System.currentTimeMillis();
            printStream.print(message);
            //Thread.sleep(1000);
            BufferedReader bufferedReader = new BufferedReader(inputStream);
            String line = "";
            message = "";
            while((line = bufferedReader.readLine())!= null){
                message = message + line + "\n";
            }
            long t1 = System.currentTimeMillis();
            System.out.printf("message {%s} received from server after %d msec \n",message,(t1-t0));
            //gan lai hien thi ra ds
            txtListPlayer.setText(message);
            clientSocket.close();
                } catch (IOException ex) {
                    System.out.println("error: " + ex.getMessage());
                } finally {
                printStream.close();
            }
       // }
        System.out.println("Mission Completed");
        
        
    }//GEN-LAST:event_btnShowListActionPerformed

    private void btnCreateRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateRoomActionPerformed
         Random randomGenerator = new Random();
        int randomInt = randomGenerator.nextInt(10000);
        String roomID = "";
        if(randomInt < 10){
            roomID = "000" + String.valueOf(randomInt);
        }else if(randomInt >= 10 && randomInt < 100){
             roomID = "00" + String.valueOf(randomInt);
        }else if(randomInt >= 100 && randomInt < 1000){
             roomID = "0" + String.valueOf(randomInt);
        }else if(randomInt >= 1000 && randomInt < 10000){
             roomID = "" + String.valueOf(randomInt);
        }
        txtRoomID.setText(roomID);
        
        //xu li gui ma toi 
        
         Socket clientSocket =null;
         String serverHostName = "localhost";
         
         int port = 3030;
        
        Scanner s = new Scanner(System.in);
        //System.out.println("Press a key to send the message ...");
        //s.next();
        //prepare the String. WARNING: add \n to make sure that the message is considered as one line

        //for (int i=0;i<20;i++){
            int i = 0;
            
            String temp = "CreateRoom " + txtRoomID.getText() + " " + txtName.getText();
            
            PrintStream printStream = null;
            try {
                try {
                    clientSocket = new Socket(serverHostName, port);
                } catch (IOException ex) {
                    System.out.println("[TCP Client] cannot open the socket with the server");
                }
            printStream = new PrintStream(clientSocket.getOutputStream());
            InputStreamReader inputStream = new InputStreamReader(clientSocket.getInputStream());
            System.out.println("Sending message "+ temp);
            String message = temp +"\n";
            long t0 = System.currentTimeMillis();
            printStream.print(message);
            //Thread.sleep(1000);
            BufferedReader bufferedReader = new BufferedReader(inputStream);
            String line = "";
            message = "";
            while((line = bufferedReader.readLine())!= null){
                message = message + line + "\n";
            }
            long t1 = System.currentTimeMillis();
            System.out.printf("message {%s} received from server after %d msec \n",message,(t1-t0));
            //thông báo nếu tạo success
            if(message.startsWith("createRoomSuccess") == true){
                String [] str1 = message.split(" ");
                for (int j = 0; j < str1.length; j++) {
                    System.out.println("\n - receive : " + str1[j]);
                    if(j == (str1.length-1)){
                        RoomID = str1[j];
                        
                    }
                     if(j == (str1.length-2)){
                        RoomMaster = str1[j];
                        
                    }
                    
                }
                //System.out.println("==== " + RoomID + " " + RoomMaster);
                     JOptionPane.showMessageDialog(this, "Create room with ROOM ID: " + RoomID + " - Room master: " + RoomMaster + " successfully!");
            }
            //gan lai hien thi ra ds
            clientSocket.close();
                } catch (IOException ex) {
                    System.out.println("error: " + ex.getMessage());
                } finally {
                printStream.close();
            }
       // }
        System.out.println("Mission Completed");
    }//GEN-LAST:event_btnCreateRoomActionPerformed

    private void btnJoinRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnJoinRoomActionPerformed
        if(txtRoomID.getText().equals("") == false && txtName.getText().equals("") == false){
        Socket clientSocket =null;
         String serverHostName = "localhost";
         
         int port = 3030;
        
        Scanner s = new Scanner(System.in);
        //System.out.println("Press a key to send the message ...");
        //s.next();
        //prepare the String. WARNING: add \n to make sure that the message is considered as one line

        //for (int i=0;i<20;i++){
            int i = 0;
            
            String temp = "JoinRoom " + txtRoomID.getText() + " " + txtName.getText();
            
            PrintStream printStream = null;
            try {
                try {
                    clientSocket = new Socket(serverHostName, port);
                } catch (IOException ex) {
                    System.out.println("[TCP Client] cannot open the socket with the server");
                }
            printStream = new PrintStream(clientSocket.getOutputStream());
            InputStreamReader inputStream = new InputStreamReader(clientSocket.getInputStream());
            System.out.println("Sending message "+ temp);
            String message = temp +"\n";
            long t0 = System.currentTimeMillis();
            printStream.print(message);
            //Thread.sleep(1000);
            BufferedReader bufferedReader = new BufferedReader(inputStream);
            String line = "";
            message = "";
            while((line = bufferedReader.readLine())!= null){
                message = message + line + "\n";
            }
            long t1 = System.currentTimeMillis();
            System.out.printf("message {%s} received from server after %d msec \n",message,(t1-t0));
            //thông báo nếu tạo success
            if(message.startsWith("joinRoomSuccess") == true){
                String [] str1 = message.split(" ");
                for (int j = 0; j < str1.length; j++) {
                    System.out.println("\n - receive : " + str1[j]);
                    if(j == (str1.length-2)){
                        RoomID = str1[j];
                        
                    }
                     if(j == (str1.length-1)){
                        RoomStatus = str1[j];
                        
                    }
                    
                }
                //System.out.println("==== " + RoomID + " " + RoomMaster);
                     JOptionPane.showMessageDialog(this, "Join room with ROOM ID: " + RoomID + " successfully!");
            }else{
                String error = "";
                if(RoomStatus.equalsIgnoreCase("1")){
                    error = "Room is start...";
                }
                JOptionPane.showMessageDialog(this, "Cannot Join room with ROOM ID: "  + RoomID + " " + error);
            }
            //gan lai hien thi ra ds
            clientSocket.close();
                } catch (IOException ex) {
                    System.out.println("error: " + ex.getMessage());
                } finally {
                printStream.close();
            }
       // }
        System.out.println("Mission Completed");
        }else{
             JOptionPane.showMessageDialog(this, "You must input ROOM ID!");
        }
    }//GEN-LAST:event_btnJoinRoomActionPerformed

    private void btnStartGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartGameActionPerformed
        if(txtRoomID.getText().equals("") == false && txtName.getText().equals("") == false){

        Socket clientSocket =null;
         String serverHostName = "localhost";
         
         int port = 3030;
        
        Scanner s = new Scanner(System.in);
        //System.out.println("Press a key to send the message ...");
        //s.next();
        //prepare the String. WARNING: add \n to make sure that the message is considered as one line

        //for (int i=0;i<20;i++){
            int i = 0;
            
            String temp = "startGame " + txtRoomID.getText() + " " + txtName.getText();
            
            PrintStream printStream = null;
            try {
                try {
                    clientSocket = new Socket(serverHostName, port);
                } catch (IOException ex) {
                    System.out.println("[TCP Client] cannot open the socket with the server");
                }
            printStream = new PrintStream(clientSocket.getOutputStream());
            InputStreamReader inputStream = new InputStreamReader(clientSocket.getInputStream());
            System.out.println("Sending message "+ temp);
            String message = temp +"\n";
            long t0 = System.currentTimeMillis();
            printStream.print(message);
            //Thread.sleep(1000);
            BufferedReader bufferedReader = new BufferedReader(inputStream);
            String line = "";
            message = "";
            while((line = bufferedReader.readLine())!= null){
                message = message + line + "\n";
            }
            long t1 = System.currentTimeMillis();
            System.out.printf("message {%s} received from server after %d msec \n",message,(t1-t0));
            //thông báo nếu tạo success
            if(message.startsWith("startGame") == true){
                String [] str1 = message.split(" ");
                for (int j = 0; j < str1.length; j++) {
                    System.out.println("\n - receive : " + str1[j]);
                    if(j == (str1.length-1)){
                        RoomStatus = str1[j];
                        
                    }
                    if(j == (str1.length-2)){
                        RoomID = str1[j];
                        
                    }
                     if(j == (str1.length-3)){
                        RoomMaster = str1[j];
                        
                    }
                    
                }
                //System.out.println("==== " + RoomID + " " + RoomMaster);
                     JOptionPane.showMessageDialog(this, "Game start with ROOM ID: " + RoomID + " - Room master: " + RoomMaster + " successfully!");
            }else{
                     JOptionPane.showMessageDialog(this, "You cannot start game with ROOM ID: " + RoomID + " - Room master: " + RoomMaster + " !");
                
            }
            //gan lai hien thi ra ds
            clientSocket.close();
                } catch (IOException ex) {
                    System.out.println("error: " + ex.getMessage());
                } finally {
                printStream.close();
            }
       // }
        System.out.println("Mission Completed");
        int j;
            for (j= 10; j >= 0; j--) {
               txtTime.setText(String.valueOf(j));
                
            }
            if(j == -1){
                Snake.snake = new Snake();
            }
        }else{
            JOptionPane.showMessageDialog(this, "You must input Name and ROOM ID");
        }
    }//GEN-LAST:event_btnStartGameActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Client().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnCreateRoom;
    private javax.swing.JButton btnJoinRoom;
    private javax.swing.JButton btnLeave;
    private javax.swing.JButton btnShowList;
    private javax.swing.JButton btnStartGame;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtIP;
    private javax.swing.JTextArea txtListPlayer;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtRoomID;
    private javax.swing.JTextField txtTime;
    // End of variables declaration//GEN-END:variables
}
